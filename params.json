{"name":"TScheem Interpreter","body":"Assignment for lesson 9 of PL101 at http://www.nathansuniversity.com/.\r\n\r\nTyped Scheem interpreter (TScheem) plus tests. My flavor of TScheem has the\r\nfollowing deviations from the 'standard':\r\n\r\n* the unm operator in unary minus\r\n* the following comparison operators are valid: = <> > < >= <=\r\n* there's a modulus operator %\r\n* boolean operators: and, or, not (no short circuit in this case, sorry)\r\n* supports #nil as #nil === ()\r\n* supports lambda and lambda-one\r\n* output through alert (returns the same type that receives)\r\n* predicates: empty? zero? list? atom? number? boolean?\r\n* function application syntactic sugar: (f x y z) is the same as doing (((f x) y) z)\r\n* types are market using angular brackets: <type>. Valid types\r\n  + number\r\n  + boolean\r\n  + list\r\n  + arrow types\r\n  + any (inaccessible for the user, since it's the same as untyped)\r\n  + unit type (also inaccessible, used internally for lambdas without parameters)","tagline":"","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}